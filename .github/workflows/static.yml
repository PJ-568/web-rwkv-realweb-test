# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    # inputs:
    #   MODEL_URL:
    #     type: string
    #     description: '模型下载地址'
    #     required: true
    #     default: 'https://huggingface.co/BlinkDL/rwkv-5-world/resolve/main/RWKV-5-World-0.4B-v2-20231113-ctx4096.pth'

    #   MODEL_NAME:
    #     type: string
    #     description: '模型名称'
    #     required: true
    #     default: 'RWKV-5-World-0.4B-v2-20231113-ctx4096.pth'

    #   DEPLOY_TO_GITHUB_PAGES:
    #     type: boolean
    #     description: '是否部署到 Pages'
    #     required: true
    #     default: true

env:
  MODEL_URL: https://huggingface.co/BlinkDL/rwkv-5-world/resolve/main/RWKV-5-World-0.4B-v2-20231113-ctx4096.pth
  MODEL_NAME: RWKV-5-World-0.4B-v2-20231113-ctx4096
  TEST_MODEL_URL: https://huggingface.co/BlinkDL/rwkv-4-world/resolve/main/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth
  TEST_MODEL_NAME: RWKV-4-World-0.1B-v1-20230520-ctx4096

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Restore cache for /home/runner/models
        id: cache-home-runner-models
        uses: actions/cache@v4
        with:
          path: /home/runner/models
          key: ${{ runner.os }}-home-runner-models-${{ env.MODEL_URL }}-${{ env.TEST_MODEL_URL }}
          restore-keys: |
            ${{ runner.os }}-home-runner-models-${{ env.MODEL_URL }}-${{ env.TEST_MODEL_URL }}

      - name: Checkout web-rwkv-converter
        if: steps.cache-home-runner-models.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: 'cryscan/web-rwkv-converter'

      - name: Build model
        if: steps.cache-home-runner-models.outputs.cache-hit != 'true'
        run: |
          echo '创建 models/：'
          mkdir /home/runner/models
          # 下载模型文件并转换
          wget $MODEL_URL
          mv ./$MODEL_NAME.pth /home/runner/models
          file /home/runner/models/$MODEL_NAME.pth
          cargo run --release --example converter -- --input /home/runner/models/$MODEL_NAME.pth
          # 下载测试模型文件并转换
          wget $TEST_MODEL_URL
          mv ./$TEST_MODEL_NAME.pth /home/runner/models
          file /home/runner/models/$TEST_MODEL_NAME.pth
          cargo run --release --example converter -- --input /home/runner/models/$TEST_MODEL_NAME.pth
          # 删除转换前模型
          rm /home/runner/models/$MODEL_NAME.pth
          rm /home/runner/models/$TEST_MODEL_NAME.pth

      - name: Save cache for /home/runner/models
        if: steps.cache-home-runner-models.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: /home/runner/models
          key: ${{ runner.os }}-home-runner-models-${{ env.MODEL_URL }}-${{ env.TEST_MODEL_URL }}
          
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Packages
        run: sudo apt-get update -yq --allow-releaseinfo-change

      - name: Install Node.js
        uses: actions/setup-node@v4.0.2

      - name: Install Typescript
        run: npm install -g typescript

      - name: Restore cache for install wasm-pack
        id: cache-install-wasm-pack
        uses: actions/cache@v4
        with:
          path: ./.cargo
          key: ${{ runner.os }}-install-wasm-pack-${{ hashFiles('./.cargo/**') }}
          restore-keys: |
            ${{ runner.os }}-install-wasm-pack-

      - name: Install wasm-pack
        if: steps.cache-install-wasm-pack.outputs.cache-hit != 'true'
        run: cargo install wasm-pack

      - name: Save cache for install wasm-pack
        if: steps.cache-install-wasm-pack.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ./.cargo
          key: ${{ runner.os }}-install-wasm-pack-${{ hashFiles('./.cargo/**') }}

      - name: Build
        run: |
          RUSTFLAGS=--cfg=web_sys_unstable_apis wasm-pack build --release --target no-modules
          npx tsc

      - name: Attach model
        run: |
          mkdir assets/resolve
          cp -uvr /home/runner/models/$MODEL_NAME.st assets/resolve/
          cp -uvr /home/runner/models/$TEST_MODEL_NAME.st assets/resolve/

      - name: Delete 冗
        run: |
          # 清理构建和源代码
          rm -r src/
          rm -r target/
          rm -r *.ts
          rm -r *.cmd
          rm -r *.bash
          rm -r *.lock
          rm -r *.toml
          echo "完成清理无需部署的文件和目录"

      - name: Setup Pages
        # if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
        uses: actions/configure-pages@v4

      - name: Upload artifact
        # if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'

      - name: Deploy to GitHub Pages
        # if: ${{ github.event.inputs.DEPLOY_TO_GITHUB_PAGES == 'true' }}
        id: deployment
        uses: actions/deploy-pages@v4
